---
features_circuits:
  - |
    The function :func:`~qiskit.circuit.random.utils.random_circuit_with_graph` adds a new feature
    of generating random circuits with interaction graph.
    User can attach a float value indicating the probability of getting selected as a metadata to
    the edge of the graph generated. Pass in None if the probability is not available.
    Even if a single probability is None, this will turn off the probabilistic selection of qubit-pair.

    Arguments accepted by the function are
    :code:`interaction_graph` Takes in the interaction graph
    :code:`max_number_qubit_used` Takes the maximum number of times a qubit should be used in the circuit.
    :code:`max_operands` Take the maximum number of operands a gate should have. (Possible values are 1 or 2)
    :code:`measure` Should the circuit have measure instruction (True or False)
    :code:`conditional` Should the circuit have conditional operations. (True or False)
    :code:`reset` Should the cirucit have reset instruciton (True or False)
    :code:`seed` Seed for the random number generator.

    .. code-block:: python

      from qiskit.circuit.random.utils import random_circuit_with_graph
      import rustworkx as rx
      pydi_graph = rx.PyDiGraph()
      n_q = 10
      pydi_graph.add_nodes_from(range(n_q))
      cp_map = [(0, 2, 0.1), (1, 3, 0.05), (2, 4, 0.15), (3, 4, 0.2), (5, 7, 0.03), (4, 7, 0.07), (7, 9, 0.2), (5, 8, 0.2)]
      pydi_graph.add_edges_from(cp_map)
      inter_graph = (pydi_graph, None, None, None)
      qc = random_circuit_with_graph(inter_graph, max_num_qubit_usage = 2, measure = True, conditional=True, reset = True, seed=0)
      qc.draw(output='mpl', scale = 0.75)

